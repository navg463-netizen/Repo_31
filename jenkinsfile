pipeline {
    agent {
        label 'nav-ubuntu-a'
    }
    triggers {
        pollSCM('H/3 * * * *') // checks every 3 mins, or
        // OR use GitHub webhook instead (recommended)
    }

    environment {
        DOCKERHUB_USER = 'vishwacloudlab'
        IMAGE_NAME = 'jenkins-docker-lab'
        SONARQUBE = 'SonarCloud'
        SONAR_TOKEN = credentials('nav-sonarcloud-token')

    }
    stages {
        stage('Cleanup') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
         stage('S3 - GitLeaks Scan') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    if ! command -v gitleaks &> /dev/null; then
                        wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                        tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi

                    exit_code=0
                    if ! gitleaks detect --source . --no-git --verbose --report-path gitleaks-report.json; then
                        exit_code=$?
                    fi

                    if [ "$exit_code" -ne 0 ]; then
                        echo "❌ Gitleaks found leaks"
                        exit 1
                    else
                        echo "✅ No leaks found"
                    fi
                '''
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(credentialsId: 'nav-sonarcloud-token', installationName: 'nav-sq') {
                    sh '''#!/bin/bash
                        set -eux
                        echo "=== SonarQube installation ==="
                        export SONAR_SCANNER_VERSION=7.2.0.5079
                        export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux-x64
                        curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux-x64.zip
                        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
                        export PATH=$SONAR_SCANNER_HOME/bin:$PATH

                        echo "=== Running SonarQube Scanner ==="
                        sonar-scanner \
                        -Dsonar.organization="navg463-netizen" \
                        -Dsonar.projectKey="navg463-netizen_Repo_31" \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.sources=. \
                        -Dsonar.python.coverage.reportPaths=coverage.xml \
                        -Dsonar.c.file.suffixes=- \
                        -Dsonar.cpp.file.suffixes=- \
                        -Dsonar.objc.file.suffixes=- \
                        -Dsonar.login=$SONAR_TOKEN \
                        -Dsonar.exclusions=**/venv/**,**/__pycache__/**,**/tests/** \
                        '''
                }
            }
        }
        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage('S6 - Docker Build for Python App') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    if [ ! -f python_app/Dockerfile ]; then
                        echo "❌ Dockerfile not found in python_app directory"
                        exit 1
                    fi

                    # Build from project root, using python_app/Dockerfile
                    docker build -t $DOCKERHUB_USER/$IMAGE_NAME:latest -f python_app/Dockerfile .

                    # Stop/remove existing container on port 8005 if any
                    existing_container=$(docker ps -q --filter "publish=8005" || true)
                    if [ -n "$existing_container" ]; then
                        docker stop $existing_container || true
                        docker rm $existing_container || true
                    fi
                '''
            }
        }
        
        stage('Scan Docker Image with Trivy') {
            steps {
                // Scan and save report
                sh '''
                  mkdir -p trivy-reports
                  trivy image --no-progress --exit-code 0 --format table -o trivy-reports/report.txt $DOCKERHUB_USER/$IMAGE_NAME
                  cat trivy-reports/report.txt
                '''
            }
        }
 
        stage('Archive Trivy Report') {
            steps {
                archiveArtifacts artifacts: 'trivy-reports/report.txt', fingerprint: true
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}